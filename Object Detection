import cv2
import numpy as np

def detect_objects(image_path):
    # Load the pre-trained YOLO model
    net = cv2.dnn.readNetFromDarknet('yolov3.cfg', 'yolov3.weights')

    # Load the COCO class labels
    with open('coco.names', 'r') as f:
        classes = [line.strip() for line in f.readlines()]

    # Define colors for bounding box visualization
    colors = np.random.uniform(0, 255, size=(len(classes), 3))

    # Load the image
    image = cv2.imread(image_path)
    height, width, _ = image.shape

    # Create a blob from the image and pass it through the network
    blob = cv2.dnn.blobFromImage(image, 1/255.0, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
    outputs = net.forward(output_layers)

    # Initialize lists for bounding boxes, confidences, and class IDs
    boxes = []
    confidences = []
    class_ids = []

    # Process each output layer
    for output in outputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]

            if confidence > 0.5:
                # Scale the bounding box coordinates to the original image size
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Calculate the top-left corner of the bounding box
                x = int(center_x - w/2)
                y = int(center_y - h/2)

                # Add the bounding box, confidence, and class ID to the lists
                boxes.append((x, y, w, h))
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Apply non-maximum suppression to eliminate overlapping bounding boxes
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw the bounding boxes and labels on the image
    for i in indices:
        i = i[0]
        x, y, w, h = boxes[i]
        label = classes[class_ids[i]]
        confidence = confidences[i]
        color = colors[class_ids[i]]

        cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
        text = f'{label}: {confidence:.2f}'
        cv2.putText(image, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    return image

# Example usage
image_path = 'path/to/your/image.jpg'
result = detect_objects(image_path)

# Display the result
cv2.imshow('Object Detection', result)
cv2.waitKey(0)
cv2.destroyAllWindows()
